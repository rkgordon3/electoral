F<div class="center hero-unit" >

<div class='span12' >
  <div class="row">
    <div class='span3' id="jCalTarget" ></div>
    <div  class='span9' >
      <div class='row'>
        <div id="us-map" class='span8' style="width:600px;height: 400px"></div>
        <div class='span1' style="position:relative; top:330px;left:-250px">
          <i class='icon-retweet' onclick="recolor(this);" ></i>
          <span style="font-size:8px"  id='popular_vote_scheme'>Color by Popular Vote</span>
          <span style="font-size:8px"  id='electoral_vote_scheme' >Color by Electoral Vote</span>
        </div>
      </div>
      
      <div class='row'>
        <div id=<%= vote_table_id(@election) %> class='span6' >
          <%= vote_table(@election.active_candidates) %>
        </div>
      </div>
      <div class='row'>
         <div class="span1">
           <%= roll_tag(@game) %>
         </div>
         <div class='span2'>
            <%= button_tag( 'New Game', 
                 :onclick=> 'reset_button(this);',
                 :class=> 'btn btn-primary') %>
         </div>
      </div>
    </div>
  </div>
</div>



  <script>


   function recolor_handler(data){
      var mapObject = $('#us-map').vectorMap('get', 'mapObject');
      $(colorScheme).show();
      if (colorScheme == '#electoral_vote_scheme' ) {
       // toggle to popular
      red_states = jvm.values.apply({}, jvm.values(data.percent_differential.red_states));
      blue_states = jvm.values.apply({}, jvm.values(data.percent_differential.blue_states));

       
  
        mapObject.series.regions[0].setScale(['#f4e6e6', '#f72a2a']);
        mapObject.series.regions[0].setValues(data.percent_differential.red_states);
         mapObject.series.regions[1].setScale(
          ['#DEEBF7', '#08519C']);
        mapObject.series.regions[1].setValues(data.percent_differential.blue_states);
       
        colorScheme = '#popular_vote_scheme';
      } else {
         mapObject.series.regions[0].setScale(['#DEEBF7', '#08519C']);
        mapObject.series.regions[0].setValues(data.electoral_votes);
        mapObject.series.regions[1].setValues([]);
        colorScheme = '#electoral_vote_scheme';
      }
      $(colorScheme).hide();


    };

   var colorScheme = '#electoral_vote_scheme';
  function recolor(element) { 

    $.getJSON(<%= "\'#{game_path(@game)}\'" %>, recolor_handler);

  };

  function date_to_tag(date) {
    
    return "#c" +$('.jCalMo').length + "d_" 
                    + (date.getMonth()+1) + "_" 
                    + date.getDate() + "_"
                    +date.getFullYear();
  };

$('#jCalTarget').jCal({
	day:			new Date(<%= election_year(@election) %>, 
                 <%= campaign_start_month(@election)-1 %>, 
                 <%= campaign_start_day(@election) %>),
	days:			1,
	showMonths:		<%= election_cycle %>,
	monthSelect:		false,
  scrollable:          false, 
	callback:		function (day, days) {
		// This is selected element, that is, a 'day' div 
			elem =$(date_to_tag(day));
		}
	});


  function initialize_game(data){
  
    var year = 2008;
    $('#electoral_vote_scheme').hide();
    // Remove any existing player
    $("div[class*='player']").remove();
    handle_move(data.moves);

    statesValues = jvm.values.apply({}, jvm.values(data.electoral_votes));

    // Remove div for map
    $('.jvectormap-container').remove();
    $('#us-map').vectorMap({
      map: 'us_aea_en',
      backgroundColor: '#707070',
      series: {
       
        regions: [{
          scale: ['#DEEBF7', '#08519C'],
          attribute: 'fill',
          values: data.electoral_votes,
          min: jvm.min(statesValues),
          max: jvm.max(statesValues)
        },
        {
          scale: ['#DEEBF7', '#08519C'],
          attribute: 'fill',
          values: [],
          min: jvm.min(statesValues),
          max: jvm.max(statesValues)
        }]
      },
      onMarkerLabelShow: function(event, label, index){
        label.html(
          ''+data.metro.names[index]+'<br/>'+
          'Population: '+data.metro.population[year][index]+'<br/>'+
          'Unemployment rate: '+data.metro.unemployment[year][index]
        );
      },
      onRegionLabelShow: function(event, label, state_code){
        vps = data.voting_profiles[state_code];
        str = "";

       for (i = 0; i  < vps.length; i++) {
         str += vps[i].name + ": " + vps[i].votes + "<br/>";
       }
       
        label.html(
          ''+label.html()+'<br/>'+
          'Electoral Votes: '+data.electoral_votes[state_code] + "<br/>" 
           + str
        );
      }
    });

    var mapObject = $('#us-map').vectorMap('get', 'mapObject');

    $(function() {
      $.get(<%= "\'#{election_events_path(@election)}\'" %>, {}, "js" );
    });


  }

  $(function(){
    $.getJSON(<%= "\'#{game_path(@game)}\'" %>, 
       function(data) { initialize_game(data) } );
  });

function handle_move(data) {
  date_str = <%= "\'#{@election.start_date.to_s}\';" %>
  date_parts = date_str.split("-");
  start_date = new Date(date_parts[0], date_parts[1]-1, date_parts[2]);

  moves = data.moves;
              
  for (var i = 0; i < moves.length; i++) {
    player = moves[i].player;
    player_id = moves[i].player_id;
    token = moves[i].token;
    
    from = moves[i].from;
    if (from != undefined) {

      from_date = new Date(date_parts[0], date_parts[1]-1, parseInt(date_parts[2]) + parseInt(from) );
      rm_day_id = date_to_tag(from_date);
    
      rm_selector = rm_day_id +" >  div[title='" + player + "']";
      $(rm_selector).remove(); 
      pieces = $(rm_day_id + " div");
      for (var k = 0; k < pieces.length; k++) {
        pieces[k].className = "player" + k
      }

    }
    to = moves[i].to;
    to_date = new Date(date_parts[0], date_parts[1]-1, parseInt(date_parts[2]) + parseInt(to) );
  
          
    to_day_id = date_to_tag(to_date);
    
    style_id = $(to_day_id + " div").length;
    $(to_day_id).html(
      $(to_day_id).html()+"<div title=" 
                 + "'" + player + "'"
                 + " class='player" + style_id + "'>" 
                 +"<i class='"
                 +token
                 +"'></i></div>");
    //$(to_day_id).popover('show'); 

    if (moves[i].event > 0) {
      $.get(<%= "\'#{event_activate_path}\'" %>, 
              { 'candidate_id' : player_id, 'event_id' : moves[i].event}, 
              "js");
            
    }

  }
}

// re-initialize game
function reset_button(e) {
    $.getJSON(<%= "\'#{reset_game_path(@game)}\'" %>, 
        function(data) { initialize_game(data); });
};
</script>
